<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nick&#39;s Blog</title>
  <subtitle>出发之前永远是梦想 上路之后永远是挑战</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nickgo.com/"/>
  <updated>2016-04-17T07:02:31.929Z</updated>
  <id>http://nickgo.com/</id>
  
  <author>
    <name>Nick Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何直接在github上预览html效果</title>
    <link href="http://nickgo.com/2016/04/17/%E5%A6%82%E4%BD%95%E7%9B%B4%E6%8E%A5%E5%9C%A8github%E4%B8%8A%E9%A2%84%E8%A7%88html%E6%95%88%E6%9E%9C/"/>
    <id>http://nickgo.com/2016/04/17/如何直接在github上预览html效果/</id>
    <published>2016-04-17T06:16:35.000Z</published>
    <updated>2016-04-17T07:02:31.929Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/0060lm7Tgw1f2zoo4eo2ej30l10d9gnb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们经常会在&lt;strong&gt;Github&lt;/strong&gt;上托管我们的web项目，但一般只能在上面看到我们的源码，如果想要在线预览我们的项目该怎么办呢？其实只需要很简单的方法就能做到了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Github项目效果在线预览&quot;&gt;&lt;a href=&quot;#Github项目效果在线预览&quot; class=&quot;headerlink&quot; title=&quot;Github项目效果在线预览&quot;&gt;&lt;/a&gt;Github项目效果在线预览&lt;/h2&gt;&lt;p&gt;在&lt;strong&gt;Github&lt;/strong&gt;上托管的项目中经常会存放一些demo的html文件在里面，比如像是下面这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/0060lm7Tgw1f2zoo4eo2ej30l10d9gnb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果直接点击html文件只能看到html文件的源码，那么有没有什么办法可以直接在浏览器看到html的网页效果而不用克隆到本地呢？&lt;/p&gt;
&lt;p&gt;做法是&lt;strong&gt;&lt;a href=&quot;http://htmlpreview.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.com/&lt;/a&gt;&lt;/strong&gt;直接把github上的html文件链接复制在上面即可，或者直接在你的html文件链接前加上&lt;strong&gt;&lt;a href=&quot;http://htmlpreview.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?&lt;/a&gt;&lt;/strong&gt;如图：&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/0060lm7Tgw1f2zoo4dm1bj30lj08raaw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;比如，Github上我有这么一个文件&lt;strong&gt;&lt;a href=&quot;https://github.com/Nicksapp/To-Do-List/blob/master/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Nicksapp/To-Do-List/blob/master/index.html&lt;/a&gt;&lt;/strong&gt;,直接访问看到的是这样的：&lt;br&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1f2zoo4nsmcj30pa0etjvo.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;只有这样访问我们的文件才能直接在网页中预览到效果：&lt;strong&gt;&lt;a href=&quot;http://htmlpreview.github.io/?https://github.com/Nicksapp/To-Do-List/blob/master/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://htmlpreview.github.io/?https://github.com/Nicksapp/To-Do-List/blob/master/index.html&lt;/a&gt;&lt;/strong&gt;像是这样：&lt;br&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/0060lm7Tgw1f2zp683ug6j30s00jqjtr.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;赶紧拿自己的项目试试吧！&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/0060lm7Tgw1f2zoo4eo2ej30l10d9gnb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们经常会在&lt;strong&gt;Github&lt;/strong&gt;上托管我们的web项目，但一般只能在上面看到我们的源码，如果想要在线预览我们的项目该怎么办呢？其实只需要很简单的方法就能做到了&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="实用技巧" scheme="http://nickgo.com/categories/%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="github" scheme="http://nickgo.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令总结</title>
    <link href="http://nickgo.com/2016/04/04/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://nickgo.com/2016/04/04/Git常用命令总结/</id>
    <published>2016-04-03T16:30:28.000Z</published>
    <updated>2016-04-03T16:48:55.304Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1f2jzaz7beqj30cn05ajrq.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学会这些命令，你就可以熟练的使用Git工具，听上去就让人兴奋，嘿嘿！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name &amp;quot;Your Name&amp;quot;&lt;/code&gt;设置你的仓库用户名（用于标识提交者）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name &amp;quot;email@example.com&amp;quot;&lt;/code&gt;设置你的仓库邮箱（用于标识提交者）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;初始化一个git仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add --all&lt;/code&gt;添加所有更改文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add filename&lt;/code&gt;指定添加名为filename文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;commit message&amp;quot;&lt;/code&gt;添加更改的信息，必须要有，不然报错，不建议不加&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;查看git当前状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git diff filename&lt;/code&gt;查看filename修改内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;查看最近的提交日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;单行显示提交日志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard commitID&lt;/code&gt;利用&lt;code&gt;git log&lt;/code&gt;得到的commitID返回版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;回到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt;查看命令的历史，可以找到&lt;code&gt;git log&lt;/code&gt;看不到的commitID，因为&lt;code&gt;git log&lt;/code&gt;只显示当前的提交日志，如果你提交了一次，退回版本后又后悔了，就能查看上次提交的commitID&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -- filename&lt;/code&gt;利用版本库中的版本替换工作区中的文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset HEAD filename&lt;/code&gt;撤销add，回到工作区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm filename&lt;/code&gt;删除文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add origin https://github.com/pengloo53/learngit.git&lt;/code&gt;将本地库关联到github远程库上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;第一次推送的时候要加上&lt;code&gt;-u&lt;/code&gt;参数，可以将本地库的master分支与远程库的master分支关联起来；下次提交就不需要加&lt;code&gt;-u&lt;/code&gt;了。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/pengloo53/learngit.git&lt;/code&gt;克隆远程库到本地&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;分支管理&quot;&gt;&lt;a href=&quot;#分支管理&quot; class=&quot;headerlink&quot; title=&quot;分支管理&quot;&gt;&lt;/a&gt;分支管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt;创建dev分支并切换到dev&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;查看当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge dev&lt;/code&gt;合并指定分支到当前分支，如，你现在master分支，那么执行命令就将dev分支合并到了master分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d dev&lt;/code&gt;删除dev分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;查看分支合并图&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; dev&lt;/code&gt;禁用「Fast forward」，也就是保留分支的相关信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;将工作区现场储藏起来，等以后恢复后继续工作。通常用于处理更为着急的任务时&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;查看保存的工作现场&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;恢复工作现场&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop&lt;/code&gt;删除stash内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;恢复的同时直接删除stash内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply stash@{0}&lt;/code&gt;恢复指定的工作现场，当你保存了不只一份工作现场时&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -D feature-vulcan&lt;/code&gt;强行删除分支。用于不需要合并，就地删除的情况&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote&lt;/code&gt;查看远程库的信息，一般返回origin&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;查看远程库的详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin master&lt;/code&gt;将本地master分支推送到远程master分支(&lt;br&gt;  master分支为主分支，因此要时刻与远程同步；&lt;br&gt;  dev分支为开发分支，团队成员都需要在上面工作，所以也需要与远程同步；&lt;br&gt;  bug分支只用于在本地修复bug，没有必要推送到远程；&lt;br&gt;  feature新功能分支是否推送到远程，取决于你是否和其他人合作在上面开发。&lt;br&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/pengloo53/learngit.git&lt;/code&gt;将远程库克隆到本地，默认只能看到master分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b dev origin/dev&lt;/code&gt;创建远程dev分支到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;将远程分支的最新内容抓取下来&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream dev origin/dev&lt;/code&gt;将本地dev分支与远程dev分支之间建立链接&lt;br&gt;&lt;br&gt;&lt;em&gt;多人协作工作模式&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;首先，可以试图用&lt;code&gt;git push origin branch-name&lt;/code&gt;推送自己的修改；&lt;/li&gt;
&lt;li&gt;如果推送失败，则因为远程分支比你的本地更新，需要先用&lt;code&gt;git pull&lt;/code&gt;试图合并（如果&lt;code&gt;git pull&lt;/code&gt;提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令&lt;code&gt;git branch --set-upstream branch-name origin/branch-name&lt;/code&gt;）; &lt;/li&gt;
&lt;li&gt;如果合并有冲突，则解决冲突，并在本地提交； &lt;/li&gt;
&lt;li&gt;没有冲突或者解决掉冲突后，再用&lt;code&gt;git push origin branch-name&lt;/code&gt;推送就能成功！&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;标签管理&quot;&gt;&lt;a href=&quot;#标签管理&quot; class=&quot;headerlink&quot; title=&quot;标签管理&quot;&gt;&lt;/a&gt;标签管理&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git tag v1.0&lt;/code&gt;给当前分支打上标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag&lt;/code&gt;查看所有的标签，按时间顺序列出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline --abbrev-commit&lt;/code&gt;缩略commitID并单行显示提交信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag v0.9 commitID&lt;/code&gt;通过上一条命令查看commitID，然后打上标签。用于忘记打标签的情况，因为标签其实就是只想某个commitID的指针，默认情况下，标签打在最新的提交上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git show v0.9&lt;/code&gt; 查看标签信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; commitID&lt;/code&gt;创建带有说明的标签，&lt;code&gt;-a&lt;/code&gt;指定标签名，&lt;code&gt;-m&lt;/code&gt;指定说明文字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git tag -d v0.1&lt;/code&gt; 删除标签v0.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin v1.0&lt;/code&gt;推送标签1.0到远程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin --tags&lt;/code&gt;推送所有的标签到远程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin :refs/tags/v0.9&lt;/code&gt;删除远程标签，但是前提是要先在本地删除对应标签&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;自定义Git&quot;&gt;&lt;a href=&quot;#自定义Git&quot; class=&quot;headerlink&quot; title=&quot;自定义Git&quot;&gt;&lt;/a&gt;自定义Git&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git config --global color.ui true&lt;/code&gt;让Git显示颜色&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;在这个文件里编辑你要忽略的文件，并提交到Git中，就可以忽略特殊文件的检查。如将&lt;code&gt;-.db&lt;/code&gt;写入&lt;code&gt;.gitignore&lt;/code&gt;文件中，将忽略所有db文件。可以参考github收集的所有.gitignore&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global alias.st status&lt;/code&gt;将status的别名设置成st，那么&lt;code&gt;git st&lt;/code&gt;=&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global alias.unstage &amp;#39;reset HEAD&amp;#39;&lt;/code&gt;那么&lt;code&gt;git reset HEAD filename&lt;/code&gt;=&lt;code&gt;git unstage filename&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global alias.last &amp;#39;log -1&amp;#39;&lt;/code&gt;敲&lt;code&gt;git last&lt;/code&gt;就显示最后一次提交了&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;搭建Git服务器&quot;&gt;&lt;a href=&quot;#搭建Git服务器&quot; class=&quot;headerlink&quot; title=&quot;搭建Git服务器&quot;&gt;&lt;/a&gt;搭建Git服务器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install git&lt;/code&gt;安装Git&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo adduser git&lt;/code&gt;添加Git用户&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo git init --bare sample.git&lt;/code&gt;初始化git仓库&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo chown -R git:git sample.git&lt;/code&gt;修改仓库的所属用户为git&lt;br&gt;&lt;/li&gt;
&lt;li&gt;将git用户的信息&lt;code&gt;git:x:1001:1001:,,,:/home/git:/bin/bash&lt;/code&gt;改成&lt;code&gt;git:x:1001:1001:,,,:/home/git:/bin/git-shell&lt;/code&gt;,为了禁用shell登录&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@server:/director/sample.git&lt;/code&gt;克隆Git服务器上的仓库&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1f2jzaz7beqj30cn05ajrq.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;学会这些命令，你就可以熟练的使用Git工具，听上去就让人兴奋，嘿嘿！&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://nickgo.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://nickgo.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://nickgo.com/2016/03/31/my-new-post/"/>
    <id>http://nickgo.com/2016/03/31/my-new-post/</id>
    <published>2016-03-31T14:59:10.000Z</published>
    <updated>2016-04-03T09:50:18.141Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1f2jno83esjj311y0lcq5o.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;认识hexo&quot;&gt;&lt;a href=&quot;#认识hexo&quot; class=&quot;headerlink&quot; title=&quot;认识hexo&quot;&gt;&lt;/a&gt;认识hexo&lt;/h2&gt;&lt;p&gt;hexo是一款基于Node.js的静态博客框架，可以生成静态文件并且一键部署到github pages上，并且他可以使用markdown来编写文章，十分简单。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/0060lm7Tgw1f2jno83esjj311y0lcq5o.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="test" scheme="http://nickgo.com/categories/test/"/>
    
    
      <category term="博客，测试" scheme="http://nickgo.com/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://nickgo.com/2016/03/30/hello-world/"/>
    <id>http://nickgo.com/2016/03/30/hello-world/</id>
    <published>2016-03-30T14:34:47.303Z</published>
    <updated>2016-04-03T10:03:18.065Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/0060lm7Tgw1f2jo610sk3j31hb0u0qkh.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;http://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/0060lm7Tgw1f2jo610sk3j31hb0u0qkh.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
